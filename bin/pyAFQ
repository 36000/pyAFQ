#!/usr/bin/env python

from argparse import ArgumentParser
import os
import os.path as op
import toml
import json
import datetime
import platform

import AFQ
from AFQ import api
from AFQ.utils.bin import get_default_args
import AFQ.segmentation as seg
import AFQ.tractography as aft

import logging
logging.basicConfig(level=logging.INFO)


usage = """pyAFQ

Provide path to config file. With sections (XXX spell out all the defaults):

[files]
dmriprep_path = '/path/to/dmriprep/folder'

[bundles]

[tracking]

[segmentation]


Only the `files` section is strictly required. If other sections are not
included in the config file, default behavior for these parts will kick in.


"""
parser = ArgumentParser(usage)

parser.add_argument(dest='config', action="store", type=str,
                    help="Path to config file")

opts = parser.parse_args()

config = toml.load(opts.config)

files = config.get("files", {})

dmriprep_path = files.get("dmriprep_path")

if dmriprep_path is None:
    raise RuntimeError("Config file must provide dmriprep_path")

config['pyAFQ'] = {}
config['pyAFQ']['utc_time_started'] = datetime.datetime.now().isoformat('T')
config['pyAFQ']['version'] = AFQ.__version__
config['pyAFQ']['platform'] = platform.system()

afq_path = op.join(op.split(dmriprep_path)[0], 'afq')
os.makedirs(afq_path, exist_ok=True)

afq_metadata_file = op.join(afq_path, 'afq_metadata.toml')

with open(afq_metadata_file, 'w') as ff:
    toml.dump(config, ff)

sub_prefix = files.get("sub_prefix", "sub")
dwi_folder = files.get("dwi_folder", "dwi")
dwi_file = files.get("dwi_file", "*dwi")
anat_folder = files.get("anat_folder", "anat")
anat_file = files.get("anat_file", "*T1w*")
seg_file = files.get("seg_file", "*aparc+aseg*")
b0_threshold = files.get("b0_threshold", 0)
reg_template = files.get("reg_template", None)

tracking = config.get("tracking", {})
track_defaults = get_default_args(aft.track)
tracking_params = {}
for k, v in track_defaults.items():
    tracking_params[k] = tracking.get(k, v)

wm_labels = tracking.get(
    "wm_labels",
    [250, 251, 252, 253, 254, 255, 41, 2, 16, 77])

segmentation = config.get("segmentation", {})
seg_defaults = get_default_args(seg.Segmentation.__init__)
segmentation_params = {}
for k, v in seg_defaults.items():
    segmentation_params[k] = segmentation.get(k, v)

bundles = config.get("bundles", {})
bundle_names = bundles.get("bundles", api.BUNDLES)
scalars_model = bundles.get("scalars_model", "DTI")
scalars = bundles.get("scalars", ["fa", "md"])

compute = config.get("compute", {})
dask_it = compute.get("dask_it", False)

myafq = api.AFQ(dmriprep_path,
                sub_prefix=sub_prefix,
                dwi_folder=dwi_folder,
                dwi_file=dwi_file,
                anat_folder=anat_folder,
                anat_file=anat_file,
                seg_file=seg_file,
                b0_threshold=float(b0_threshold),
                bundle_names=bundle_names,
                dask_it=dask_it,
                reg_template=reg_template,
                wm_labels=wm_labels,
                segmentation_params=segmentation_params,
                tracking_params=tracking_params)


# Do all the things:
myafq.set_dti_cfa()
myafq.set_dti_pdd()
myafq.set_template_xform()
myafq.export_rois()
myafq.export_bundles()
myafq.combine_profiles()

# If you got this far, you can report on time ended and record that:
config['pyAFQ']['utc_time_ended'] = datetime.datetime.now().isoformat('T')

with open(afq_metadata_file, 'w') as ff:
    toml.dump(config, ff)
