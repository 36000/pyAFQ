#!/usr/bin/env python

from optparse import OptionParser

import numpy as np
import dipy.core.gradients as dpg
from AFQ import dti
from AFQ.utils.bin import parse_string

usage = """pyAFQ_dti_predict [options]"""
parser = OptionParser(usage)

parser.add_option("-p", "--params", type="string", action="callback",
                  callback=parse_string,
                  help="A file containing DKI params")

parser.add_option("-l", "--bval", type="string", action="callback",
                  callback=parse_string,
                  help="Comma-separated (no spaces!) list of b-value files")

parser.add_option("-c", "--bvec", type="string", action="callback",
                  callback=parse_string,
                  help="Comma-separated (no spaces!) list of b-vector files")

parser.add_option("-o", "--out_dir",
                  help="full path to directory for files to be saved (will be created if it doesn't exist)")

parser.add_option("-s", "--S0_file",
                  help="File containing S0 measurements to use in prediction")

parser.add_option('-b', '--b0_threshold', help="b0 threshold",
                  default=0, type=float)

opts, args = parser.parse_args()

bvals = []
bvecs = []
for bval_file, bvec_file in zip(opts.bval, opts.bvec):
    bvals.append(np.loadtxt(bval_file))
    bvecs.append(np.loadtxt(bvec_file))

gtab = dpg.gradient_table(np.concatenate(bvals),
                          np.concatenate(bvecs, -1),
                          b0_threshold=opts.b0_threshold)

dti.predict(opts.params[0], gtab, S0_file=opts.S0_file,
            out_dir=opts.out_dir)
